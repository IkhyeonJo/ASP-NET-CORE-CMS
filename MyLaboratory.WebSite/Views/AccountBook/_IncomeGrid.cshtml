@model IQueryable<MyLaboratory.WebSite.Models.ViewModels.AccountBook.IncomeOutputViewModel>
@* Should only include grid declaration *@

@(Html
    .Grid(Model)
    .Build(columns =>
    {
        columns.Add(model => model.Id).Titled(localizer[nameof(MyLaboratory.WebSite.Models.ViewModels.AccountBook.IncomeOutputViewModel.Id)]);
        columns.Add(model => model.MainClass).Titled(localizer[nameof(MyLaboratory.WebSite.Models.ViewModels.AccountBook.IncomeOutputViewModel.MainClass)]);
        columns.Add(model => model.SubClass).Titled(localizer[nameof(MyLaboratory.WebSite.Models.ViewModels.AccountBook.IncomeOutputViewModel.SubClass)]);
        columns.Add(model => model.Contents).Titled(localizer[nameof(MyLaboratory.WebSite.Models.ViewModels.AccountBook.IncomeOutputViewModel.Contents)]);
        columns.Add(model => model.Amount).Titled(localizer[nameof(MyLaboratory.WebSite.Models.ViewModels.AccountBook.IncomeOutputViewModel.Amount)]);
        columns.Add(model => model.DepositMyAssetProductName).Titled(localizer[nameof(MyLaboratory.WebSite.Models.ViewModels.AccountBook.IncomeOutputViewModel.DepositMyAssetProductName)]);
        columns.Add(model => model.Created).Titled(localizer[nameof(MyLaboratory.WebSite.Models.ViewModels.AccountBook.IncomeOutputViewModel.Created)]);
        columns.Add(model => model.Updated).Titled(localizer[nameof(MyLaboratory.WebSite.Models.ViewModels.AccountBook.IncomeOutputViewModel.Updated)]);
        columns.Add(model => model.Note).Titled(localizer[nameof(MyLaboratory.WebSite.Models.ViewModels.AccountBook.IncomeOutputViewModel.Note)]);
    })
    .Id("incomeGrid")
    .Css("table table-striped")
    .AppendCss("table-hover")
    //.Attributed(new { data_type = "individuals" })
    //.RowAttributed(model => new { @class = model.IsWorking == true ? "working" : null, data_id = model.Id })
    .RowAttributed(model => new { @class = "table-inactive", data_id = model.Id})
    .Using(GridFilterMode.Row)
    .Empty(localizer["No data found"])
    .Filterable()
    .Sortable()
    .Pageable(pager => {
        pager.PageSizes = new Dictionary<Int32, string> { { 10, "10" }, { 25, "25" }, { 50, "50" }, {100, "100" } };
        pager.ShowPageSizes = true;
        pager.RowsPerPage = 10;
    })
)